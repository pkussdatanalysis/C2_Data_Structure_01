- Class: meta
  Course: C2_Data_Structure_01
  Lesson: Vector
  Author: mzl
  Type: Standard
  Organization: pkuss
  Version: 2.4.3
  
- Class: text
  Output: 在开始向量的学习之前我们先学习一下有关R包函数的练习。

- Class: text
  Output: 搜索路径是当前已经载入R环境的包的列表。虽然R中有很多的软件包，但是在使用的某个时刻可能也只有几个包被载入了工作
    环境当中。R会通过搜索路径来寻找函数。当你输入函数名称时，R会在路径中一次搜索，直到在某个载入的包里找到函数。
    
- Class: cmd_question
  Output: 查看当前环境载入了哪些包。使用函数search()
  CorrectAnswer: search()
  AnswerTests: omnitest(correctExpr='search()')
  Hint: search()
  
- Class: text
  Output: 当你以往使用某个R包中的函数或者数据集时，如果此包未被加载，需要先加载这个包。
    
- Class: cmd_question
  Output: 使用library()可以显示当前可以使用的包
  CorrectAnswer: library()
  AnswerTests: omnitest(correctExpr='library()')
  
- Class: cmd_question
  Output: 我们需要使用MASS包中的lda函数，对比之前library()和search()的输出，可是这个包并未被加载到当前工作环境中，
    我们依然使用函数library(),但要添加参数package="MASS",package是library的第一个参数，因此可以省略"package="。
  CorrectAnswer: library("MASS")
  AnswerTests: omnitest(correctExpr='library("MASS")')
  Hint: library("MASS")
  
- Class: cmd_question
  Output: 与加载相对，我们仍然可以卸载掉当前环境中已经加载的包，可以使用函数detach(),参数使用name,参数名是package:pkgname
    的形式，例如package:MASS。name是第一个参数，可以省略参数名。卸载之前加载的MASS包。
  CorrectAnswer: detach("package:MASS")
  AnswerTests: omnitest(correctExpr='detach("package:MASS")')
  Hint: detach("package:MASS")
    
- Class: cmd_question
  Output: install.packages()命令可以从CRAN中安装我们所需要的包,参数中指定我们需要的包名即可。ggplot2是一个功能强大的绘图
    包，安装它。
  CorrectAnswer: install.packages("ggplot2")
  AnswerTests: omnitest(correctExpr='install.packages("ggplot2")')
  Hint: install.packages("ggplot2")

- Class: text
  Output: R中最简单和最常见的数据结构就是向量。

- Class: text
  Output: 向量有两种不同的风格：原子向量和列表。原子向量只包含一种数据类型，列表可能包含多种数据类型。在学习列表之前学习一下向量。  

- Class: text
  Output: 现在我们创建一个数值型的向量。任何包含数据的对象被称为数据结构，数值向量是最简单的R中的数据结构类型。
    事实上，即使是单个数字也被认为是一个长度为1的向量。

- Class: cmd_question
  Output: 创建向量的最简单方法是使用c()函数，c()函数代表"concatenate"或"combine"。要创建一个包含数字1.1、9和3.14的向量，
    使用c（1.1，9，3.14）。现在试一试，并将结果存储在一个称为z变量中。
  CorrectAnswer: z <- c(1.1, 9, 3.14)
  AnswerTests: omnitest(correctExpr='z <- c(1.1, 9, 3.14)')
  Hint: 输入z < - c(1.1,9,3.14)会将矢量(1.1,9,3.14)分配给新的变量称为z。在向量中包含逗号之后的单个空格不是必需的，
    但有助于使您的代码更简洁，更具可读性。

- Class: cmd_question
  Output: 任何时候对特定功能有任何疑问，都可以访问R的内置的帮助文件通过'？'命令。例如，如果你想要知道关于c（）函数更多的信息，
    输入?c，而不用通常在函数后面的圆括号。试一试。
  CorrectAnswer: ?c
  AnswerTests: omnitest(correctExpr='?c')
  Hint: 输入?c，然后按Enter键。这将调出c()函数的帮助文件。

- Class: cmd_question
  Output: 输入z查看其内容。
  CorrectAnswer: z
  AnswerTests: omnitest(correctExpr='z')
  Hint: 输入z并按Enter查看其内容。

- Class: cmd_question
  Output: 你可以组合向量来创建一个新的向量。创建一个包含z，555，然后又是z的的新向量。不要将这个向量分配给一个新的变量，
    以便我们能够立即看到结果。
  CorrectAnswer: c(z, 555, z)
  AnswerTests: omnitest(correctExpr='c(z, 555, z)')
  Hint: 输入c（z，555，z）。不要创建一个新的变量。我们只是想查看结果。

- Class: cmd_question
  Output: 数值向量可以用在算术表达式中。输入以下内容看看会发生什么：z * 2 + 100。
  CorrectAnswer: z * 2 + 100
  AnswerTests: omnitest(correctExpr='z * 2 + 100')
  Hint: 输入z * 2 + 100，而不将结果赋值给变量。 *符号用于乘法，并与许多键盘上的数字8共享一个键。

- Class: text
  Output: 首先，R将z中三个元素中的每一个乘以2，然后每个元素加上100来获得你在上面看到的结果。

- Class: text
  Output: 其他常见的算术运算符是'+'，'-'，'/'和'^'（其中x ^ 2指“x平方”）。取平方根，使用sqrt()函数，取绝对值使用abs()函数。

- Class: cmd_question
  Output: 取z - 1的平方根，并将其分配给一个名为my_sqrt的新变量。
  CorrectAnswer: my_sqrt <- sqrt(z - 1)
  AnswerTests: omnitest(correctExpr='my_sqrt <- sqrt(z - 1)')
  Hint: 将sqrt(z - 1)的结果赋给一个名为my_sqrt的变量。

- Class: mult_question
  Output: 在我们查看my_sqrt变量的内容之前，你觉得它包含什么？
  CorrectAnswer: 长度为3的向量
  AnswerChoices: 长度为3的向量;一个数字（即长度为1的向量）;一个长度为0的向量（即一个空向量）
  AnswerTests: omnitest(correctVal='长度为3的向量')
  Hint: 想想R如何处理其他的”向量化“操作：逐个元素地。

- Class: cmd_question
  Output: 打印my_sqrt的内容。
  CorrectAnswer: my_sqrt
  AnswerTests: omnitest(correctExpr='my_sqrt')
  Hint: 只需输入my_sqrt并按Enter查看其值。

- Class: text
  Output: 正如你可能已经猜到的那样，R首先从z的每个元素中减去1，然后取每个元素的平方根。这给你一个与原始向量z相同的长度的向量。

- Class: cmd_question
  Output: 现在，创建一个名为my_div的新变量，获取z除以my_sqrt的值。
  CorrectAnswer: my_div <- z / my_sqrt
  AnswerTests: omnitest(correctExpr='my_div <- z / my_sqrt')
  Hint: 输入my_div < - z / my_sqrt。 '/'符号两边的空格不是所需的，但通常可以通过使代码看起来不那么混乱来提高可读性。
    最后，这是个人喜好。
    
- Class: cmd_question
  Output: 继续，打印my_div的内容。
  CorrectAnswer: my_div
  AnswerTests: omnitest(correctExpr='my_div')
  Hint: 输入my_div并按Enter键查看其内容。

- Class: text
  Output: 当给定两个相同长度的向量时，R简单地执行指定算术运算（“+”，“ - ”，“*”等）。如果向量有不同的长度，R循环较短的向量，
    直到更长的向量长度相等。

- Class: text
  Output: 当我们在前面的例子中做z * 2 + 100时，z是一个长度3的向量，但2和100是每个都是长度为1的向量。

- Class: text
  Output: 实际上，R循环”2“构成2s的向量，100成了一个100s的向量。换句话说，当你要求R来计算z* 2 + 100，
    它真正计算的是：z * c（2,2,2）+ c（100,100,100）

- Class: cmd_question
  Output: 去看向量如何“循环”的另一个例子，尝试相加c（1,2,3,4）和c（0,10）。不要将结果保存在新变量中。
  CorrectAnswer: c(1, 2, 3, 4) + c(0, 10)
  AnswerTests: omnitest(correctExpr='c(1, 2, 3, 4) + c(0, 10)')
  Hint: 在控制台中输入c（1，2，3，4）+ c（0，10）以查看R如何相加两个不同的长度向量。不要将结果分配给一个变量。

- Class: text
  Output: 如果较短的向量的长度不能整除长度更长的向量的长度，R仍然会应用循环方法，但是会抛出一个警告让你知道一些可能会发生的事情。

- Class: cmd_question
  Output: 例如，尝试c（1，2，3，4）+ c（0，10，100）。
  CorrectAnswer: c(1, 2, 3, 4) + c(0, 10, 100)
  AnswerTests: omnitest(correctExpr='c(1, 2, 3, 4) + c(0, 10, 100)')
  Hint: 键入c（1，2，3，4）+ c（0，10，100）来看看R如何处理处理两个不等长向量，当较短的向量长度不能整除较长的向量的长度时。
    不要分配结果给变量。

- Class: text
  Output: 我想向你展示一些节省时间的技巧。

- Class: text
  Output: 在本课早些时候，你计算了z * 2 + 100.让我们假装你犯了一个错误，你打算加1000而不是100.你可以重新输入表达式，或者....

- Class: cmd_question
  Output: 在许多编程环境中，向上箭头将循环前面的命令。尝试按下键盘上的向上箭头，直到找到该命令（z * 2 + 100），然后将100更改为1000，然后按Enter键。
    如果向上箭头不起作用，请输入正确的命令。
  CorrectAnswer: z * 2 + 1000
  AnswerTests: omnitest(correctExpr='z * 2 + 1000')
  Hint: 如果您的环境不支持向上箭头功能，则只需输入更正后的命令即可继续。

- Class: text
  Output: 最后假设您想要查看之前创建的变量的内容，但似乎无法记住是否将其命名为my_div或myDiv。你可以尝试两个，看看会发生什么，或...

- Class: cmd_question
  Output: 您可以键入变量名称的前两个字母，然后按Tab键（可能不止一次）。大多数编程环境将提供一个以“my”开头的变量列表。
    这被称为自动完成，当你的工作空间中有很多变量的时候可以很方便。试一试。 （如果自动补全不适用于您，请输入my_div并按Enter键。）
  CorrectAnswer: my_div
  AnswerTests: omnitest(correctExpr='my_div')
  Hint: 如果您的编程环境不支持自动完成，只需键入my_div并按Enter键继续。

- Class: text
  Output: 之前，我们使用全是数值型原子向量的类型。其他的原子向量类型包括逻辑，字符，整数，复数。接下来，我们将学习逻辑和字符向量。

- Class: text
  Output: 逻辑向量可以包含值TRUE，FALSE和NA（'不可用'）。这些值是由逻辑“条件”产生的。让我们试验一下一些简单的条件。
- Class: cmd_question
  Output: 首先，创建一个数值向量num_vect，其中包含值0.5,55，-10和6。
  CorrectAnswer: num_vect <- c(0.5, 55, -10, 6)
  AnswerTests: omnitest(correctExpr='num_vect <- c(0.5, 55, -10, 6)')
  Hint: 回想一下，c()函数用于创建一个向量。如果你忘了如何使用它，请使用？c来访问帮助文件。不要忘记分配结果到一个名为
    num_vect的新变量。
- Class: cmd_question
  Output: 现在，创建一个名为tf的变量，存储num_vect <1的结果被读为'num_vect小于1'。
  CorrectAnswer: tf <- num_vect < 1
  AnswerTests: omnitest(correctExpr='tf <- num_vect < 1')
  Hint: 使用tf < - num_vect <1并将结果赋值给一个变量叫做tf。

- Class: mult_question
  Output: 你认为tf会是什么样子？
  CorrectAnswer: 4个逻辑值的向量
  AnswerChoices: 4个逻辑值的向量; 一个逻辑值
  AnswerTests: omnitest(correctVal='4个逻辑值的向量')
  Hint: 记住我们关于向量算术的课程吗？内容是R在逐个元素的基础上执行很多操作。我们称之为“向量化”操作。

- Class: cmd_question
  Output: P现在打印tf的内容。
  CorrectAnswer: tf
  AnswerTests: omnitest(correctExpr='tf')
  Hint: 只需输入tf并按Enter键即可查看其值。

- Class: text
  Output: 语句num_vect <1是一个条件，tf告诉我们我们的数字向量num_vect的相应元素是否满足这个条件。

- Class: text
  Output: num_vect的第一个元素是0.5，小于1因此表达式0.5 <1为真。 num_vect的第二个元素是55，这是
    大于1，所以语句55 <1是FALSE。同样的逻辑适用于第三和第四元素。

- Class: cmd_question
  Output: 我们试试另一个。输入num_vect> = 6，而不将结果赋给一个新变量。
  CorrectAnswer: num_vect >= 6
  AnswerTests: omnitest(correctExpr='num_vect >= 6')
  Hint: 不要在这个上创建一个新的变量。我们只是想看看结果num_vect> = 6.确保'>'和'='符号之间没有空格。把它们整体看作一个
    “大于或等于”的一个符号。

- Class: text
  Output: 这一次，我们去求是否num_vect的每个单独的元素是大于或等于6.由于只有55和6大于或等于6。因此第二和第四个元结果素是TRUE，
    第一个和第三个元素是假的。

- Class: text
  Output: 这些例子中的符号'<'和'>='被称为“逻辑运算符”。其他逻辑运算符包括'>'，'<='，'=='(绝对等)，'！='代表不等。

- Class: text
  Output: 如果我们有两个逻辑表达式A和B，如果看是否至少一个是真的用A | B（逻辑'或'），看它们是否都是真用A＆B（逻辑'和'）。
    最后，！A是否定的A，当A为FALSE时为真，反之亦然。

- Class: text
  Output: 花一些时间去研究一下这些逻辑运算符的各种组合是个好主意，直到你学会他们的使用

- Class: text
  Output: 尽力预测以下每个语句的结果。
- Class: mult_question
  Output: (3 > 5) & (4 == 4)
  CorrectAnswer: 'FALSE'
  AnswerChoices: TRUE; FALSE
  AnswerTests: omnitest(correctVal='FALSE')
  Hint: 把这个问题分解成2个部分。
  
- Class: mult_question
  Output: (TRUE == TRUE) | (TRUE == FALSE)
  CorrectAnswer: 'TRUE'
  AnswerChoices: TRUE; FALSE
  AnswerTests: omnitest(correctVal='TRUE')
  Hint: 把这个问题分解成2个部分。中间的“|”表示至少其中一件是真的结果就是真

- Class: mult_question
  Output: ((111 >= 111) | !(TRUE)) & ((4 + 1) == 5)
  CorrectAnswer: 'TRUE'
  AnswerChoices: TRUE; FALSE
  AnswerTests: omnitest(correctVal='TRUE')
  Hint: 这是一个棘手的问题。请记住'!'表示对它后边的结果取反。这里还有一个“操作顺序”的问题。都括在括号内条件，应先判断。
    然后，按你的方法解决它。
    
- Class: text
  Output: 有几个比较常见的与向量运算相关的函数，下面我们将介绍几类方法。

- Class: cmd_question
  Output: 求向量的最大值、最小值和范围的函数。首先创建向量v,其元素为数值10，8，6，2
  CorrectAnswer: v <- c(10, 8, 6,2)
  AnswerTests: omnitest(correctExpr='v <- c(10, 8,6,2)')
  Hint: 使用c函数创建向量，v <- c(10,8,6,2)
  
- Class: cmd_question
  Output: 使用max函数获取其最大值
  CorrectAnswer: max(v)
  AnswerTests: omnitest(correctExpr='max(v)')
  Hint: max(v)
  
- Class: cmd_question
  Output: max(v)获取了向量v的最大值，同理min()可以获取数值型向量的最小值。使用range获取向量值得范围
  CorrectAnswer: range(v)
  AnswerTests: omnitest(correctExpr='range(v)')
  Hint: range(v)
  
- Class: cmd_question
  Output: 与max、min相对应的函数which.max、which.min返回最大值和最小值对应的下标。请获取v最小值的索引位置
  CorrectAnswer: which.min(v)
  AnswerTests: omnitest(correctExpr='which.min(v)')
  Hint: which.min(v)
  
- Class: cmd_question
  Output: sort()函数可以对向量进行排序，默认采用升序。请对向量v排序并打印出结果
  CorrectAnswer: sort(v)
  AnswerTests: omnitest(correctExpr='sort(v)')
  Hint: sort(v)
  
- Class: cmd_question
  Output: R中存在两个等价的函数sort.list()和order()。这两个函数与sort()函数相对应，返回排序后相应的下标。使用向量v作为参数看看sort.list或者order的效果。
  CorrectAnswer: sort.list(v)
  AnswerTests: any_of_exprs('sort.list(v)', 'order(v)')
  Hint: sort.list(v)
  
- Class: text
  Output: 字符向量在R中也很常见。双引号用于区分字符对象，如下例所示。

- Class: cmd_question
  Output: 创建一个包含以下单词的字符向量：”My“，”name“，“is”。请记住将每个单词放在自己的一组双引号中，这样R知道他们是字符串。
    将该向量存储在名为my_char的变量中。
  CorrectAnswer: my_char <- c("My", "name", "is")
  AnswerTests: omnitest(correctExpr='my_char <- c("My", "name", "is")')
  Hint: 输入my_char < - c（“My”，“name”，“is”）来创建一个名为my_char的长度为3字符向量。确保逗号分隔这些单词是在双引号之外，
    否则R认为逗号是一部分的话。

- Class: cmd_question
  Output: 打印my_char的内容，看看它的样子。
  CorrectAnswer: my_char
  AnswerTests: omnitest(correctExpr='my_char')
  Hint: 输入my_char

- Class: text
  Output: 现在，my_char是长度为3的字符向量。假设我们想要将my_char的元素和一个连续的字符串（即长度为1的字符向量）连接起来，
    我们可以使用paste（）函数来做到这一点。

- Class: cmd_question
  Output: 现在输入paste（my_char，collapse =“ ”）。确保元素之间插入“collapse”参数中的双引号里的内容。在一秒钟你会明白为什么。
  CorrectAnswer: paste(my_char, collapse = " ")
  AnswerTests: omnitest(correctExpr='paste(my_char, collapse = " ")')
  Hint: 使用paset（my_char，collapse =“”）连接向量中的单词他们几乎形成了一个句子。'collapse'参数的双引号之间应该有一个空格，
    这样的话在每个单词中间就会出现一个空格。

- Class: text
  Output: paste()函数的'collapse'参数告诉R当我们把my_char字符向量的元素连接在一起时，我们想用单个空格分隔它们。

- Class: cmd_question
  Output: 要添加（或'连接'）你的名字到my_char的末尾，使用c（）函数是这样的：c（my_char，“your_name_here”）。
    把你的名字放在双引号“your_name_here”的位置。现在试一试，将结果存储在一个叫my_name新变量中。
  CorrectAnswer: my_name <- c(my_char, "Swirl")
  AnswerTests: var_is_a("character", "my_name"); expr_uses_func("c"); expr_creates_var("my_name");
    val_has_length(4)
  Hint: 使用c（）函数将您的名字放在my_char向量的后边。确保将结果赋给一个名为my_name的新变量。如果你的名字是“swirl”，
    你可以输入my_name < - c（my_char，“Swirl”）。

- Class: cmd_question
  Output: 看看my_name的内容
  CorrectAnswer: my_name
  AnswerTests: omnitest(correctExpr='my_name')
  Hint: 输入my_name并按Enter查看其内容。

- Class: cmd_question
  Output: 现在，再次使用paste（）函数将my_name中的单词连接在一起成一个单一的字符串。别忘了说collapse=" "！
  CorrectAnswer: paste(my_name, collapse = " ")
  AnswerTests: omnitest(correctExpr='paste(my_name, collapse = " ")')
  Hint: 使用paste(my_name，collapse =" ")将所有四个单词连接在一起,单词之间用空格分隔。

- Class: text
  Output: 在这个例子中，我们使用了paste()函数来连接单个的字符向量。 paste()也可以用来连接多个字符向量的元素。

- Class: cmd_question
  Output: 在最简单的情况下，我们可以连接两个各自长度均为1的字符向量（即连接两个单词）。尝试paste(“Hello”，“world！”，sep =“ ”)
  CorrectAnswer: paste("Hello", "world!", sep = " ")
  AnswerTests: omnitest(correctExpr='paste("Hello", "world!", sep = " ")')
  Hint: 输入paste（“Hello”，“world！”，sep =“ ”）两个单词“Hello”和“world”由一个空格隔开。paste（）函数的'sep'参数中使用双引号。

- Class: cmd_question
  Output: 对于一个稍微复杂的例子，我们可以连接两个向量，每个向量长度3.使用paste（）将整数向量1：3与字符向量c（“X”，“Y”，“Z”）连接起来。
    这一次，使用sep=“”在连接元素之间不留空格。
  CorrectAnswer: paste(1:3, c("X", "Y", "Z"), sep = "")
  AnswerTests: any_of_exprs('paste(1:3, c("X", "Y", "Z"), sep = "")', 'paste(c(1:3), c("X", "Y", "Z"), sep = "")')
  Hint: 使用paset（1：3，c（“X”，“Y”，“Z”），sep =“”）来查看当我们使用paste（）连接两个等长的向量会发生什么。

- Class: text
  Output: 如果向量的长度不同，你认为会发生什么？ （tip：我们在之前的一堂课中谈到了这个）

- Class: cmd_question
  Output: 向量循环！尝试paste（LETTERS，1：4，sep =“ - ”），其中LETTERS是R中预定义包含所有26个英文字母的字符向量。
  CorrectAnswer: paste(LETTERS, 1:4, sep = "-")
  AnswerTests: omnitest(correctExpr='paste(LETTERS, 1:4, sep = "-")')
  Hint: 键入paste（LETTERS，1：4，sep =“ - ”），看R如何循环使用小向量1：4以匹配字母向量的长度。注意这次我们使用`-`作为分隔符。

- Class: text
  Output: 由于字符向量LETTERS长于数字向量1：4，，R只是回循环，或重复，1：4，直到匹配了字符向量的的长度。

- Class: text
  Output: 另外值得注意的是数字向量1：4被paste()函数被“强制”成一个字符向量

- Class: text
  Output: 我们将在另一课中讨论强制性，但所有的真正意义在于上面输出中的数字1,2,3和4不再是R的数字，而是字符“1”，“2”，“3”和“4”。 

- Class: text
  Output: Well done！本节课到此结束！
