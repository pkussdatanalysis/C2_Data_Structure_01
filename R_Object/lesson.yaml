- Class: meta
  Course: C2_Data_Structure_01
  Lesson: R_Object
  Author: mzl
  Type: Standard
  Organization: pkuss
  Version: 1.0
- Class: text
  Output: 在R 中，操作的所有变量，都是一种R 对象(Object)(一切皆对象的思想)。这一堂课程中，就是要简介R 的对象的结构。
  
- Class: text
  Output:  向量对象有两个很重要的属性：'mode'和'length'。'mode'代表这个向量的值型态，总共有：'logical'、'integer'、'numeric'、'complex'、'character'和'raw'。
    'length'则代表这个向量中值的个数。
    
- Class: cmd_question
  Output: 若要查询一个向量的型态和长度，可以使用函数'mode`和`length'。我们已经为同学们预定义一个向量x,请同学试试看：'mode(x)'。
  CorrectAnswer: mode(x)
  AnswerTests: omnitest('mode(x)', "numeric")
  Hint: mode(x)
  
- Class: mult_question
  Output: 请问x 的型态是？
  AnswerChoices: logical;integer;numeric;complex;character;raw
  CorrectAnswer: numeric
  AnswerTests: omnitest(correctVal = 'numeric')
  Hint: 请参考'mode(x)'的输出
  
- Class: cmd_question
  Output: 接着，请试试看'length(x)'。
  CorrectAnswer: length(x)
  AnswerTests: omnitest('length(x)', 5L)
  Hint: length(x)
- Class: text
  Output: 要判断某个对象是否某种类型，有许多个类似于is.numeric（is.XXX类型的函数，xxx可以是numeric、character等类型）
    is.numeric用来判断某个对象是否是数值型，它返回一个逻辑型结果。is.chracter用来判断某个对象是否是字符型。 
    
- Class: cmd_question
  Output: 判断x是否是数值型 
  CorrectAnswer: is.numeric(x)
  AnswerTests: omnitest('is.numeric(x)')
  Hint: length(x)
- Class: text
  Output: 从上边的结果可知，x是数值型向量。R可以进行强制的类型转换，使用形如as.XXX的函数。比如将转换成字符型向量就可以这样：as.character()。
  
- Class: cmd_question
  Output: 将向量x转换成字符型向量，并显示结果
  CorrectAnswer: as.character(x)
  AnswerTests: omnitest('as.character(x)')
  Hint: as.character(x)
  
- Class: mult_question
  Output: 请问x 的长度是
  AnswerChoices: 1;2;3;4;5;6
  CorrectAnswer: 5
  AnswerTests: omnitest(correctVal = '5')
  Hint: 请参考'length(x)'的输出
  
- Class: text
  Output: R 也可以建立一种叫做'list'的数据结构对象。在此对象中，每一个值都是R 对象，都具有各自的`mode`、`length`等属性。
    我们会在较为复杂的统计模型中，见到这样的用法。举例来说，在R 中如果要建立一个回归模型，会使用：`g <- lm(dist ~ speed, cars)`
    这个表达式表示利用车速speed当自变量、刹车距离dist当因变量，建立一个回归模型。先不管`lm`如何使用，上述的例子主要是希望能让同学了解`g`
    这个对象的结构。只要掌握这部分的课程内容，未来就可以轻松的探索更多机器学习或统计分析演算法的输出结果。
   
- Class: cmd_question
  Output: 请同学检查`g`的型态。
  CorrectAnswer: mode(g)
  AnswerTests: omnitest('mode(g)', mode(g))
  Hint: mode(g)
  
- Class: cmd_question
  Output: 请同学检查`g`的长度
  CorrectAnswer: length(g)
  AnswerTests: omnitest('length(g)', length(g))
  Hint: length(g)
  
- Class: cmd_question
  Output: 可以使用如`g[1:2]`的方式取出`g`的第一个到第二个值。而这样的输出结果和`g`会有同样的`mode`。请同学试看看`g[1:2]`的结果。
  CorrectAnswer: g[1:2]
  AnswerTests: omnitest('g[1:2]', g[1:2])
  Hint: g[1:2]
  
- Class: text
  Output: 在R console出现一些数字以及文字。在最上面的`$coefficients`，表示`g[1:2]`这个列表的第一个值（同时也是`g`的第一个值），是有名字的。而它的名字是：`"coefficients"`。
    由于`g[1:2]`的第一个值是一个有名字的numeric 向量，R 就把这个向量所有的名字和值一起显示在console之中。
    而这个numeric 向量的第一个值是-17.579095，名字是"(Intercept)"。第二个值是3.932409，名字则是"speed"
    
- Class: text
  Output: 接着，`$residuals`表示`g[1:2]`的第二个值也是有名字的，而且它的名字是`"residuals"`。由于这个值也是一个有名字的numeric 向量，
    所以R 就把值和名字同时显示到console上。所以我们就可以知道，这个numeric 向量的第一个值的名字是"1"，值是3.849460。以此类推。
    
- Class: text
  Output: 然而，整个R Console的结果显示，g[1:2]仍然是一个list，因为R 只有在显示list的内容才会带有`$coefficients`和`$residuals`
    这种标记。如果只是一个numeric 向量，就不会显示出`$coefficients`和`$residuals`。
    
- Class: cmd_question
  Output: 请同学输入`list(1, a = 2)`来看看R 如何显示list，并比较当值有附带名字及没有附带名字时，输出结果的不同。
  CorrectAnswer: list(1, a = 2)
  AnswerTests: omnitest('list(1, a = 2)')
  Hint: list(1, a = 2)
  
- Class: text
  Output: 在输出结果的一开始，R 显示了`[[1]]`，接着显示一个值为1 的numeric 向量。开头的`[[1]]`不只说明了这个物件是一个list，
    也说明接下来显示的是第一个值的内容。
    
- Class: text
  Output: 接着，R 显示了`$a`，以及显示一个值为2 的numeric 向量。开头的`$a`因为位置在上述的`[[1]]`之后，所以代表这是这个list物件的
    第二个值。同时，这个值的名字是`"a"`。
    
- Class: cmd_question
  Output: 若想找出`g`的第一个值的对象本身，而非被包在一个list中，我们需要用到：`g[[1]]`。请同学试试看。
  CorrectAnswer: g[[1]]
  AnswerTests: omnitest('g[[1]]', g[[1]])
  Hint: g[[1]]
  
- Class: cmd_question
  Output: 请同学查询`g[[1]]`的型态。
  CorrectAnswer: mode(g[[1]])
  AnswerTests: omnitest('mode(g[[1]])', mode(g[[1]]))
  Hint: mode(g[[1]])
  
- Class: cmd_question
  Output: 请同学查询`g[[1]]`的长度。
  CorrectAnswer: length(g[[1]])
  AnswerTests: omnitest('length(g[[1]])', length(g[[1]]))
  Hint: length(g[[1]])
  
- Class: text
  Output: 再针对`g[1]`和`g[[1]]`的差异进行说明一次。使用`g[1]`时，R 取出列表的第一个元素，并且维持list的结构，所以`g[1]`的结果还仍
    是list。相反的，使用`g[[1]]`时，R 会打破list的结构，再取出向量的第一个元素，所以`g[[1]]`的型态会是存放在list里面的R对象的型态。
    在上述的例子中，因为g 这个list的第一个存放的R 物件是numeric向量，所以得到`g[1]`的型态是list，`g[[1]]`的型态则是numeric 。
    
- Class: text
  Output: 一般来说，对R 对象使用`[]`之后，会取得和该对象那个相同型态的对象。所以`a[1]`的型态会和`a`一样，而`[[]]`就没有类似的特性了。
  
- Class: text
  Output:  经过上述的练习，相信同学可以理解list所代表的意义。list最实用的特性，在于它可以装不同型态的值。以`g`为例，虽然大部分值的型态
    都是numeric，但是也有些型态为call和list的对象。list让R 的开发者能更有弹性的建立较为复杂的模型。同学在学会list之后，
    也可以更有能力来了解不同R 套件所建立的模型对象。
   
- Class: cmd_question
  Output: 请同学检查看看`g[[10]]`的型态
  CorrectAnswer: mode(g[[10]])
  AnswerTests: omnitest('mode(g[[10]])', 'call')
  Hint: mode(g[[10]])
  
- Class: text
  Output: 这里的`g[[10]]`其实是记载着产生g 的代码。在R 里面，这样的代码是存成call型态的对象。我们现在只要知道这是一种call就可以了。
    至于call是什么东西，要等到同学需要开始深入的学习R 的原代码、运作机制时，才需要弄懂。我们现在只要知道，list可以装所有R 的对象就可以了。
    
- Class: cmd_question
  Output: 另外，我们也可以为list命名。上述例子中，我们除了用`g[[1]]`来取得第一个值之外，也可以用`g[["coefficients"]]`来取得第一个值。
    因为`g`这个向量是被命名的，而第一个名字就是`"coefficients"`。请同学试试看。
    
  CorrectAnswer: g[["coefficients"]]
  AnswerTests: omnitest('g[["coefficients"]]')
  Hint: g[["coefficients"]]
  
- Class: text
  Output: 适当的命名，可以让带啊吗更易读。举例来说，若知道`g`是一个回归模型，也知道回归模型通常就是一个系数列表，
    那我们就可以预期到`g[["coefficients"]]`就是这个回归模型的系数。（在统计学之中，不同回归模型的参数通常称作："coefficients")。
    
- Class: cmd_question
  Output: 我们可以更改一个向量的长度。举例来说，现在x 是一个长度是5 、型态是numeric的向量。我们可以利用：`length(x) <- 10`把x 
    的长度改成10。请同学试试看。
  CorrectAnswer: length(x) <- 10
  AnswerTests: omnitest('length(x) <- 10')
  Hint: length(x) <- 10
  
- Class: cmd_question
  Output: 现在我们可以来看看x 的值。请同学输入：`x`
  CorrectAnswer: x
  AnswerTests: omnitest('x', c(1,2,3,4,5,NA,NA,NA,NA,NA))
  Hint: x
  
- Class: cmd_question
  Output: 我们也可以直接在x 的指定位置中放入新的值，并且借此增加x 的长度。举例来说：`x[7] <- 7`可以让x 的第7 个位置的值变成7 。
    请同学试试看。
  CorrectAnswer: x[7] <- 7
  AnswerTests: any_of_exprs('x[7] <- 7', 'x[7] = 7')
  Hint: x[7] <- 7
  
- Class: cmd_question
  Output: 现在我们可以来看看x 的值。请同学输入：`x`
  CorrectAnswer: x
  AnswerTests: omnitest('x', c(1,2,3,4,5,NA,7,NA,NA,NA))
  Hint: x
  
- Class: cmd_question
  Output: 由于x 本来的长度就已经超过7 ，所以并没有变长。请同学试试这个代码：`x[13] <- 13`。
  CorrectAnswer: x[13] <- 13
  AnswerTests: any_of_exprs('x[13] <- 13', 'x[13] = 13')
  Hint: x[13] <- 13
  
- Class: cmd_question
  Output: 现在我们可以来看看x 的值。请同学输入：`x`
  CorrectAnswer: x
  AnswerTests: omnitest('x', c(1,2,3,4,5,NA,7,NA,NA,NA, NA, NA, 13))
  Hint: x
  
- Class: cmd_question
  Output: 如果我们要缩短x 的长度，可以运用如：`x2 <- x[c(1,3,5,7,9,11,13)]`，这样得出的x2就会是缩短的x 。请同学试试看。
  CorrectAnswer: x2 <- x[c(1,3,5,7,9,11,13)]
  AnswerTests: any_of_exprs('x2 <- x[c(1,3,5,7,9,11,13)]', 'x2 = x[c(1,3,5,7,9,11,13)]')
  Hint: x2 <- x[c(1,3,5,7,9,11,13)]
  
- Class: cmd_question
  Output: 现在我们可以来看看x2的值。 请同学输入：`x2`
  CorrectAnswer: x2
  AnswerTests: omnitest('x2', c(1,3,5,7,NA,NA,13))
  Hint: x2
  
- Class: text
  Output: 由结果中发现，x2只剩下原本在x 奇数位置的值了。在整理数据时，我们常常需要这样的技巧，来从数据中选出我们真正要分析的部份，
    并调整成我们需要的长度。
    
- Class: cmd_question
  Output: 所有的R 对象，都有「属性」(attributes)。我们可以用`attributes`这个函数来印出一个R 物件的属性。请同学试试看：`attributes(g)`
  CorrectAnswer: attributes(g)
  AnswerTests: omnitest('attributes(g)')
  Hint: attributes(g)
  
- Class: mult_question
  Output: 根据刚刚的输出结果，`attributes(g)`的属性应该是哪一种向量呢？
  AnswerChoices: numeric;character;list
  CorrectAnswer: list
  AnswerTests: omnitest(correctVal = 'list')
  
- Class: cmd_question
  Output: 进入下一个题目之前，请同学先输入`names(g)`来查询`g`的名字，并和`attributes(g)`的结果做比对。
  CorrectAnswer: names(g)
  AnswerTests: omnitest('names(g)')
  Hint: names(g)
  
- Class: text
  Output: 在`attributes(g)`的输出结果中，会看到一个带有名字的list。请同学记得，所有R 对象的attributes都是带有名字的list。
   
- Class: cmd_question
  Output: 而这个对象的名字，就是`attributes(g)`这个list中，名字为`"names"`的值，而且值一定是character向量。在R 中可以用
   `attr(g, "names")`来取得名字是"names"的属性。请同学试试看。
  CorrectAnswer: attr(g, "names")
  AnswerTests: omnitest('attr(g, "names")', names(g))
  Hint: attr(g, "names")
  
- Class: text
  Output: 上一题的输出结果，就是g 这个list的name名字属性，也是`names(g)`的结果。
    
- Class: cmd_question
  Output: 回到`attributes(g)`的输出。除了第一个值是名字为`"names"`的character向量之外，第二个值是一个名为`"class"`的character向量。
    character向量的值是"lm"。请同学试试看：`attr(g, "class")`
  CorrectAnswer: attr(g, "class")
  AnswerTests: omnitest('attr(g, "class")')
  Hint: attr(g, "class")
  
- Class: text
  Output: attributes这样的功能在探索一些复杂的R 模型对象时是非常好用的。我们在之后深入探讨`matrix`、`data.frame`等进阶对象的时候，
    也会需要了解attributes的相关知识。现在，同学只要知道所有的R 对象都具有attributes就可以了。
   
- Class: text
  Output: 而名称为"class"的属性是非常重要的，因为它牵涉到R 的对象的类型。这部份将会在更进阶的章节中，再跟同学说明。
    
- Class: cmd_question
  Output: 由于"names"和"class"这两个属性是如此的重要，所以R 中设计有`class`和`names`这两个函数，让使用者可以针对一个R 对象
    的names和class进行修改。请同学试试看：`names(g)`。
  CorrectAnswer: names(g)
  AnswerTests: omnitest('names(g)')
  Hint: names(g)
  
- Class: cmd_question
  Output: 再请同学试试看：`class(g)`。
  CorrectAnswer: class(g)
  AnswerTests: omnitest('class(g)')
  Hint: class(g)

- Class: mult_question
  Output: 确定将这次练习的结果提交吗?
  CorrectAnswer: NULL
  AnswerChoices: Yes;No
  AnswerTests: post_on_demand()
  Hint: "" 
  
- Class: text
  Output: 这个课程简介了R 的对象系统。希望未来同学在接触到没学过的对象时，可以有系统地来摸索R 对象的输出。

